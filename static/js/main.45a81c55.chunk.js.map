{"version":3,"sources":["components/Tile/Tile.js","components/Chessboard/Chessboard.js","components/Chessboard/Piece.js","validation/Validator.js","Constants.js","components/Chessboard/audio/move.mp3","components/DiffSlider/DiffSlider.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","piece","className","type","style","backgroundImage","colour","Piece","x","y","this","enPassant","isMoved","taken","Validator","boardState","find","p","tileIsOccupiedByOpponent","tileIsOccupied","px","py","dirn","direction","Math","abs","myKing","xInc","yInc","xCount","yCount","tileIsOccupiedByOpponentSpec","myPieces","i","length","push","isValidMove","isCheck","moves","amtOfMoves","toString","hasValidMovesRemaining","check","kingW","kingB","currentPiece","pieceHold","splice","findIndex","isInCheck","startRow","console","log","tileIsOccupiedByOpponentOrEmpty","maxX","myRook","H_AXIS","V_AXIS","H_AXIS_W","V_AXIS_W","H_AXIS_B","V_AXIS_B","game","Game","initialBoardState","turn","moveList","updatedPieces","bottomColour","Chessboard","useState","random","setRandom","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","modalIsOpen","setModalIsOpen","modalMessage","setModalMessage","chessboardRef","useRef","validator","board","tileColour","colourArray","pieceTypes","initialTileColours","j","boardColours","setBoardColours","colourReset","king","updatedColours","resetBoardStateWhite","myState","resetBoardStateBlack","resetPiece","position","removeProperty","playSound","Howl","src","MoveSFX","play","alphaToNum","indexOf","numToAlpha","useEffect","getHistory","setTimeout","myMove","aiMove","initialPos","Object","keys","finalPos","initX","charAt","initY","finalX","finalY","initArray","finalArray","reduce","results","rook","isCheckmate","isStalemate","checkForEvents","updateBoard","compMove","onMouseMove","e","chessboard","current","minX","offsetLeft","offsetWidth","minY","offsetTop","offsetHeight","clientWidth","maxY","clientHeight","clientX","clientY","left","top","movePiece","onMouseDown","tile","target","classList","contains","floor","ceil","zIndex","grabPiece","onMouseUp","isValid","isEnPassant","initAlpha","finalAlpha","move","dropPiece","id","ref","overlay","content","isOpen","ariaHideApp","rel","href","crossorigin","onClick","functionName","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45a81c55.chunk.js","sourcesContent":["import './Tile.css'\r\n\r\nexport default function Tile(props) {\r\n    if (props.piece !== \"none\") {\r\n        return (\r\n            <div className={\"tile \" + props.type}>\r\n                <div className=\"piece\" style={{backgroundImage: \"url(assets/pieces/\" + props.colour + \"_\" + props.piece + \".svg)\"}}></div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className={\"tile \" + props.type}></div>\r\n        )\r\n    }\r\n    \r\n}\r\n","import React, { useRef, useEffect, useState } from 'react';\r\nimport './Chessboard.css';\r\nimport Tile from '../Tile/Tile';\r\nimport Piece from './Piece'\r\nimport Validator from '../../validation/Validator';\r\nimport { H_AXIS, V_AXIS, H_AXIS_W, V_AXIS_W, H_AXIS_B, V_AXIS_B } from '../../Constants';\r\nimport MoveSFX from './audio/move.mp3';\r\nimport { Howl } from 'howler';\r\nimport Modal from 'react-modal';\r\nimport { Game } from 'js-chess-engine';\r\n\r\nlet game = new Game();\r\nconst initialBoardState = [];\r\nlet turn = \"w\";\r\nlet check = false;\r\nlet moveList = [];\r\nlet updatedPieces = [];\r\nlet bottomColour = \"w\";\r\nlet dirn = bottomColour === \"w\" ? 1 : -1;\r\n\r\n// Push major / minor pieces and king into initialBoardState array\r\nfor (let i = 0; i < 2; i++) {\r\n    const type = (i === 0) ? \"b\" : \"w\";\r\n    const y = (i === 0) ? 7 : 0;\r\n\r\n    initialBoardState.push(new Piece(0, y, \"rook\", type));\r\n    initialBoardState.push(new Piece(7, y, \"rook\", type));\r\n    initialBoardState.push(new Piece(1, y, \"knight\", type));\r\n    initialBoardState.push(new Piece(6, y, \"knight\", type));\r\n    initialBoardState.push(new Piece(2, y, \"bishop\", type));\r\n    initialBoardState.push(new Piece(5, y, \"bishop\", type));\r\n    initialBoardState.push(new Piece(4, y, \"king\", type));\r\n    initialBoardState.push(new Piece(3, y, \"queen\", type));\r\n}\r\n\r\n// push white pawns into initialBoardState array\r\nfor (let i = 0; i < H_AXIS.length; i++) {\r\n    initialBoardState.push(new Piece(i, 1, \"pawn\", \"w\"));\r\n}\r\n\r\n// push black pawns into initialBoardState array\r\nfor (let i = 0; i < H_AXIS.length; i++) {\r\n    initialBoardState.push(new Piece(i, V_AXIS.length - 2, \"pawn\", \"b\"));\r\n}\r\n\r\n// initialize chess board\r\nexport default function Chessboard() {\r\n    const [random, setRandom] = useState(0);\r\n    const [activePiece, setActivePiece] = useState(null);\r\n    const [gridX, setGridX] = useState(0);\r\n    const [gridY, setGridY] = useState(0);\r\n    const [pieces, setPieces] = useState(initialBoardState);\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n    const [modalMessage, setModalMessage] = useState(null);\r\n    const chessboardRef = useRef(null);\r\n    const validator = new Validator();\r\n    let board = [];\r\n    let tileColour = \"\";\r\n    let colourArray = [];\r\n    let pieceTypes = [];\r\n    const initialTileColours = [];\r\n\r\n    console.log(random);\r\n\r\n    // Nested for loop that generates all 64 tiles required\r\n    for (let i = V_AXIS.length - 1; i >= 0; i--) {\r\n        for (let j = 0; j < H_AXIS.length; j++) {\r\n            let type;\r\n            let colour;\r\n\r\n            // check if the tile belongs to a piece\r\n            const piece = pieces.find(p => p.x === j && p.y === i);\r\n\r\n            type = piece ? piece.type : \"none\";\r\n            colour = piece ? piece.colour : \"none\";\r\n\r\n            // make even tiles black and odd ones white\r\n            if ((i + j) % 2 === 0) {\r\n                tileColour = \"black-tile\";\r\n            } else {\r\n                tileColour = \"white-tile\";\r\n            }\r\n\r\n            initialTileColours.push(tileColour);\r\n            pieceTypes.push(type);\r\n            colourArray.push(colour);\r\n        }\r\n    }\r\n\r\n    const [boardColours, setBoardColours] = useState(initialTileColours);\r\n\r\n    // detect user movement and play computer move\r\n    useEffect(() => {\r\n        console.log(game.getHistory());\r\n\r\n        if (turn !== bottomColour) {\r\n            setTimeout(() => {\r\n                compMove();\r\n                setRandom(0);\r\n                console.log(pieces);\r\n            }, 2000);\r\n        }\r\n    }, [pieces]);\r\n\r\n    function grabPiece(e) {\r\n        let tile = e.target;\r\n        const chessboard = chessboardRef.current;\r\n\r\n        // it the tile grabbed has a piece\r\n        if (tile.classList.contains(\"piece\") && chessboard) {\r\n            setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / (chessboard.offsetWidth / 8)));\r\n            setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - chessboard.offsetHeight) / (chessboard.offsetHeight / 8))));\r\n\r\n            const x = e.clientX - tile.offsetWidth / 2;\r\n            const y = e.clientY - tile.offsetHeight / 2;\r\n\r\n            // move piece to cursor center\r\n            tile.style.position = \"absolute\";\r\n            tile.style.left = x + \"px\";\r\n            tile.style.top = y + \"px\";\r\n            tile.style.zIndex = 90;\r\n\r\n            // set piece as active\r\n            setActivePiece(tile);\r\n        }\r\n    }\r\n\r\n    // when piece is dragged\r\n    function movePiece(e) {\r\n        const chessboard = chessboardRef.current;\r\n\r\n        // if the piece is the active piece\r\n        if (activePiece && chessboard) {\r\n\r\n            // max / min positions\r\n            const minX = chessboard.offsetLeft - activePiece.offsetWidth / 4;\r\n            const minY = chessboard.offsetTop - activePiece.offsetHeight / 4;\r\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth - activePiece.clientWidth * 3 / 4;\r\n            const maxY = chessboard.offsetTop + chessboard.clientHeight - activePiece.clientHeight * 3 / 4;\r\n\r\n            // current cursor position\r\n            const x = e.clientX - activePiece.offsetWidth / 2;\r\n            const y = e.clientY - activePiece.offsetHeight / 2;\r\n\r\n            activePiece.style.position = \"absolute\";\r\n\r\n            // if the piece is moving outside the board in the x direction, don't let it\r\n            if (x < minX) {\r\n                activePiece.style.left = minX + \"px\";\r\n            } else if (x > maxX) {\r\n                activePiece.style.left = maxX + \"px\";\r\n            } else {\r\n                activePiece.style.left = x + \"px\";\r\n            }\r\n\r\n            // if the piece is moving outside the board in the y direction, don't let it\r\n            if (y < minY) {\r\n                activePiece.style.top = minY + \"px\";\r\n            } else if (y > maxY) {\r\n                activePiece.style.top = maxY + \"px\";\r\n            } else {\r\n                activePiece.style.top = y + \"px\";\r\n            }\r\n        }\r\n    }\r\n\r\n    // when the cursor lets go\r\n    function dropPiece(e) {\r\n        const chessboard = chessboardRef.current;\r\n\r\n        if (activePiece && chessboard) {\r\n\r\n            // put piece above others\r\n            activePiece.style.zIndex = 10;\r\n\r\n            // this coordinates relative to the tiles that the mouse is hovering over\r\n            const x = Math.floor((e.clientX - chessboard.offsetLeft) / (chessboard.offsetWidth / 8));\r\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - chessboard.offsetHeight) / (chessboard.offsetHeight / 8)));\r\n\r\n            // the grabbed piece            \r\n            const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY);\r\n\r\n            // if current piece exists and is the right colour\r\n            if (currentPiece && currentPiece.colour === bottomColour && currentPiece.colour === turn) {\r\n                const isValid = validator.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.colour, pieces, dirn, check);\r\n                const isEnPassant = validator.isEnPassant(gridX, gridY, x, y, currentPiece.type, currentPiece.colour, pieces, dirn);\r\n\r\n                // set position of new piece when dropped\r\n                // check for en passant\r\n                if (isEnPassant) {\r\n                    let initAlpha = numToAlpha(gridX.toString(), gridY.toString());\r\n                    let finalAlpha = numToAlpha(x.toString(), y.toString());\r\n\r\n                    game.move(initAlpha[0] + initAlpha[1], finalAlpha[0] + finalAlpha[1]);\r\n                    moveList.push(currentPiece.type + currentPiece.colour + x.toString() + y.toString());\r\n\r\n                    // if the king was in check, change it's tile back to normal\r\n\r\n                    if (check) {\r\n                        colourReset();\r\n                    }\r\n\r\n                    // play sound\r\n                    playSound();\r\n\r\n                    currentPiece.isMoved = true;\r\n\r\n                    // if it's white's turn now it's black's and vice versea\r\n                    turn = turn === \"w\" ? \"b\" : \"w\";\r\n\r\n                    // direction that the pawn can move\r\n                    const direction = currentPiece.colour === \"w\" ? 1 * dirn : -1 * dirn;\r\n\r\n                    \r\n                    // change the piece's coordinates on the board and internally\r\n                    updatedPieces = pieces.reduce((results, piece) => {\r\n                        if (piece.x === gridX && piece.y === gridY) {\r\n                            piece.enPassant = false;\r\n                            piece.isMoved = true;\r\n                            piece.x = x;\r\n                            piece.y = y;\r\n                            results.push(piece);\r\n                        } else if (!(piece.x === x && piece.y === y - direction) && !(piece.x === x && piece.y === y - dirn)){\r\n                            if (piece.type === \"pawn\") {\r\n                                piece.enPassant = false;\r\n                            }\r\n\r\n                            console.log(\"adding \" + piece.colour + \" \" + piece.type + \" at \" + piece.x + \" \" + piece.y);\r\n\r\n                            results.push(piece);\r\n                            \r\n                        }\r\n\r\n                        return results;\r\n                    }, []);\r\n\r\n                    setPieces(updatedPieces);\r\n\r\n                } else if (isValid) {\r\n                    let initAlpha = numToAlpha(gridX.toString(), gridY.toString());\r\n                    let finalAlpha = numToAlpha(x.toString(), y.toString());\r\n\r\n                    game.move(initAlpha[0] + initAlpha[1], finalAlpha[0] + finalAlpha[1]);\r\n                    moveList.push(currentPiece.type + currentPiece.colour + x.toString() + y.toString());\r\n\r\n                    // if the king was in check, change it's tile back to normal\r\n                    if (check) {\r\n                        colourReset();\r\n                    }\r\n\r\n                    // play sound\r\n                    playSound();\r\n\r\n                    currentPiece.isMoved = true;\r\n\r\n                    // if it's white's turn now it's black's and vice versea\r\n                    turn = turn === \"w\" ? \"b\" : \"w\";\r\n\r\n                    // change the piece's position on the board and internally\r\n                    updatedPieces = pieces.reduce((results, piece) => {\r\n\r\n                        // when the piece is found\r\n                        if (piece.x === gridX && piece.y === gridY) {\r\n                            \r\n                            // if the piece is a pawn moving 2 forward\r\n                            if (Math.abs(gridY - y) === 2 && piece.type === \"pawn\") {\r\n                                piece.enPassant = true;\r\n                            } else {\r\n                                piece.enPassant = false;\r\n                            }\r\n\r\n                            piece.isMoved = true;\r\n                            piece.x = x;\r\n                            piece.y = y;\r\n                            results.push(piece);\r\n\r\n                        // if the piece is a pawn and not the not the active piece\r\n                        } else if (!(piece.x === x && piece.y === y)) {\r\n                            if (piece.type === \"pawn\") {\r\n                                piece.enPassant = false;\r\n                            }\r\n\r\n                            console.log(\"adding \" + piece.colour + \" \" + piece.type + \" at \" + piece.x + \" \" + piece.y);\r\n\r\n                            results.push(piece);\r\n                        }\r\n                        return results;\r\n                    }, []);\r\n                    \r\n                    setPieces(updatedPieces);\r\n                } else {\r\n\r\n                    // put piece back in original position\r\n                    resetPiece(activePiece);\r\n                }\r\n\r\n                \r\n            } else if (activePiece) {\r\n                \r\n                // put piece back in original position\r\n                resetPiece(activePiece);\r\n            }\r\n\r\n            setActivePiece(null);\r\n        } else if (activePiece) {\r\n            resetPiece(activePiece);\r\n        }\r\n\r\n        if (validator.isInCheck(turn, pieces, dirn)) {\r\n            check = true;\r\n\r\n            // find the king in check\r\n            let king = pieces.find(p => p.type === \"king\" && p.colour === turn);\r\n            \r\n            const updatedColours = boardColours;\r\n\r\n            // set the background colour of the king's tile to red\r\n            updatedColours[(7 - king.y) * 8 + king.x] = \"red-tile\";\r\n\r\n            setBoardColours(updatedColours);\r\n        }\r\n\r\n        if (validator.isCheckmate(check, turn, updatedPieces, dirn)) {\r\n\r\n            // reset the tile colours\r\n            colourReset();\r\n\r\n            // reset the pieces\r\n            if (bottomColour === \"w\") {\r\n                setPieces(resetBoardStateBlack());\r\n            } else {\r\n                setPieces(resetBoardStateWhite());\r\n            }\r\n\r\n            // set the message on the modal\r\n            setModalMessage((bottomColour === \"b\" ? \"White\" : \"Black\") + \" Wins\");\r\n\r\n            // open modal\r\n            setModalIsOpen(true);\r\n        } \r\n\r\n        if (validator.isStalemate(check, moveList, turn, updatedPieces, dirn)) {\r\n\r\n            // reset the pieces\r\n            if (bottomColour === \"w\") {\r\n                setPieces(resetBoardStateBlack());\r\n            } else {\r\n                setPieces(resetBoardStateWhite());\r\n            }\r\n\r\n            // the message displayed onthe modal\r\n            setModalMessage(\"Stalemate\");\r\n\r\n            // open modal\r\n            setModalIsOpen(true);\r\n        }\r\n    }\r\n\r\n    function colourReset() {\r\n        let king = pieces.find(p => p.type === \"king\" && p.colour === turn);\r\n            \r\n        const updatedColours = boardColours;\r\n\r\n        if (bottomColour === \"w\") {\r\n            updatedColours[(7 - king.y) * 8 + king.x] = (king.y + king.x) % 2 === 0 ? \"black-tile\" : \"white-tile\";\r\n        } else {\r\n            updatedColours[(7 - king.y) * 8 + king.x] = (king.y + king.x) % 2 === 0 ? \"white-tile\" : \"black-tile\";\r\n        }\r\n        \r\n        console.log((7 - king.y) * 8 + king.x);\r\n\r\n        setBoardColours(updatedColours);\r\n\r\n        check = false;\r\n    }\r\n\r\n    function resetBoardStateWhite() {\r\n        if (bottomColour === \"b\") {\r\n            for (let i = 0; i < boardColours.length; i++) {\r\n                boardColours[i] = boardColours[i] === \"white-tile\" ? \"black-tile\" : \"white-tile\";\r\n            }\r\n        }\r\n\r\n        let myState = [];\r\n    \r\n        game = new Game();\r\n        turn = \"w\";\r\n        check = false;\r\n        moveList = [];\r\n        updatedPieces = [];\r\n        setModalMessage(\"\");\r\n        bottomColour = \"w\";\r\n        dirn = 1;\r\n    \r\n        // Push major / minor pieces and king into initialBoardState array\r\n        for (let i = 0; i < 2; i++) {\r\n            const type = (i === 0) ? \"b\" : \"w\";\r\n            const y = (i === 0) ? 7 : 0;\r\n    \r\n            myState.push(new Piece(0, y, \"rook\", type));\r\n            myState.push(new Piece(7, y, \"rook\", type));\r\n            myState.push(new Piece(1, y, \"knight\", type));\r\n            myState.push(new Piece(6, y, \"knight\", type));\r\n            myState.push(new Piece(2, y, \"bishop\", type));\r\n            myState.push(new Piece(5, y, \"bishop\", type));\r\n            myState.push(new Piece(4, y, \"king\", type));\r\n            myState.push(new Piece(3, y, \"queen\", type));\r\n        }\r\n    \r\n        // push white pawns into initialBoardState array\r\n        for (let i = 0; i < H_AXIS.length; i++) {\r\n            myState.push(new Piece(i, 1, \"pawn\", \"w\"));\r\n        }\r\n    \r\n        // push black pawns into initialBoardState array\r\n        for (let i = 0; i < H_AXIS.length; i++) {\r\n            myState.push(new Piece(i, V_AXIS.length - 2, \"pawn\", \"b\"));\r\n        }\r\n\r\n        setPieces(myState);\r\n\r\n        return myState;\r\n    }\r\n    \r\n    function resetBoardStateBlack() {\r\n        console.log(\"settting black\");\r\n\r\n        if (bottomColour === \"w\") {\r\n            for (let i = 0; i < boardColours.length; i++) {\r\n                boardColours[i] = boardColours[i] === \"white-tile\" ? \"black-tile\" : \"white-tile\";\r\n            }\r\n        }\r\n\r\n        let myState = [];\r\n    \r\n        game = new Game();\r\n        turn = \"w\";\r\n        check = false;\r\n        moveList = [];\r\n        updatedPieces = [];\r\n        setModalMessage(\"\");\r\n        bottomColour = \"b\";\r\n        dirn = -1;\r\n    \r\n        // Push major / minor pieces and king into initialBoardState array\r\n        for (let i = 0; i < 2; i++) {\r\n            const type = (i === 0) ? \"w\" : \"b\";\r\n            const y = (i === 0) ? 7 : 0;\r\n    \r\n            myState.push(new Piece(0, y, \"rook\", type));\r\n            myState.push(new Piece(7, y, \"rook\", type));\r\n            myState.push(new Piece(1, y, \"knight\", type));\r\n            myState.push(new Piece(6, y, \"knight\", type));\r\n            myState.push(new Piece(2, y, \"bishop\", type));\r\n            myState.push(new Piece(5, y, \"bishop\", type));\r\n            myState.push(new Piece(3, y, \"king\", type));\r\n            myState.push(new Piece(4, y, \"queen\", type));\r\n        }\r\n    \r\n        // push white pawns into initialBoardState array\r\n        for (let i = 0; i < H_AXIS.length; i++) {\r\n            myState.push(new Piece(i, 1, \"pawn\", \"b\"));\r\n        }\r\n    \r\n        // push black pawns into initialBoardState array\r\n        for (let i = 0; i < H_AXIS.length; i++) {\r\n            myState.push(new Piece(i, V_AXIS.length - 2, \"pawn\", \"w\"));\r\n        }\r\n\r\n        setPieces(myState);\r\n\r\n        return myState;\r\n    }\r\n\r\n    function compMove() {\r\n        let myMove = game.aiMove();\r\n        let initialPos = Object.keys(myMove)[0];\r\n        let finalPos = myMove[Object.keys(myMove)];\r\n\r\n        if (check) {\r\n            colourReset();\r\n        }\r\n    \r\n        let initX  = initialPos.charAt(0);\r\n        let initY  = initialPos.charAt(1);\r\n        let finalX  = finalPos.charAt(0);\r\n        let finalY  = finalPos.charAt(1);\r\n\r\n        let initArray = alphaToNum(initX, initY);\r\n        let finalArray = alphaToNum(finalX, finalY);\r\n\r\n        turn = turn === \"w\" ? \"b\" : \"w\";\r\n\r\n        console.log(myMove);\r\n\r\n        // if the king was in check, change it's tile back to normal\r\n        if (check) {\r\n            colourReset();\r\n        }\r\n\r\n        // play sound\r\n        playSound();\r\n    \r\n        updateBoard(initArray[0], initArray[1], finalArray[0], finalArray[1]);\r\n\r\n    }\r\n    \r\n    function updateBoard(initX, initY, finalX, finalY) {\r\n         // change the piece's position on the board and internally\r\n         updatedPieces = pieces.reduce((results, piece) => {\r\n    \r\n            // when the piece is found\r\n            if (piece.x === initX && piece.y === initY && piece.colour !== bottomColour) {\r\n                \r\n                // if the piece is a pawn moving 2 forward\r\n                if (Math.abs(initY - finalY) === 2 && piece.type === \"pawn\") {\r\n                    piece.enPassant = true;\r\n                } else {\r\n                    piece.enPassant = false;\r\n                }\r\n    \r\n                // if the pawn has reached the end queen it\r\n                if (piece.type === \"pawn\" && (finalY === 0 || finalY === 7)) {\r\n                    piece.type = \"queen\";\r\n                }\r\n\r\n                // add the move to the move list \r\n                moveList.push(piece.type + piece.colour + finalX.toString() + finalY.toString());\r\n\r\n                // set its new coordinates, move status then put in in the new piece array\r\n                piece.isMoved = true;\r\n                piece.x = finalX;\r\n                piece.y = finalY;\r\n                results.push(piece);\r\n                console.log(initX, initY, piece.colour);\r\n\r\n                if (piece.type === \"king\" && Math.abs(initX - finalX) > 1) {\r\n                    let rook = pieces.find(p => p.x === (finalX - initX > 0 ? 7 : 0) && p.y === 7);\r\n\r\n                    if (initX > finalX) {\r\n                        rook.x = piece.x + 1;\r\n                    } else {\r\n                        rook.x = piece.x - 1;\r\n                    }\r\n                }\r\n    \r\n            // if the piece is a pawn and not the not the active piece\r\n            } else if (!(piece.x === finalX && piece.y === finalY)) {\r\n                if (piece.type === \"pawn\") {\r\n                    piece.enPassant = false;\r\n                }\r\n\r\n                if (piece.type === \"pawn\" && piece.x === finalX && piece.y === finalY - (turn === \"w\" ? dirn * -1 : dirn) && Math.abs(initX - finalX) === 1 && Math.abs(initY - finalY) === 1 && !pieces.find(p => p.x === finalX && p.y === finalY)) {\r\n                    \r\n                } else {\r\n                    results.push(piece);\r\n                }\r\n                \r\n            }\r\n            return results;\r\n        }, []);\r\n    \r\n        // update the board\r\n        setPieces(updatedPieces);\r\n        checkForEvents(bottomColour, dirn);\r\n    }\r\n    \r\n    function checkForEvents(colour, dirn) {\r\n        if (validator.isInCheck(colour, pieces, dirn)) {\r\n            check = true;\r\n\r\n            console.log(\"check\");\r\n    \r\n            // find the king in check\r\n            let king = pieces.find(p => p.type === \"king\" && p.colour === colour);\r\n            \r\n            const updatedColours = boardColours;\r\n    \r\n            // set the background colour of the king's tile to red\r\n            updatedColours[(7 - king.y) * 8 + king.x] = \"red-tile\";\r\n    \r\n            setBoardColours(updatedColours);\r\n        }\r\n    \r\n        if (validator.isCheckmate(check, colour, pieces, dirn)) {\r\n    \r\n            console.log(\"game over\");\r\n\r\n            // reset the tile colours\r\n            colourReset();\r\n    \r\n            // reset the pieces\r\n            if (bottomColour === \"w\") {\r\n                setPieces(resetBoardStateBlack());\r\n            } else {\r\n                setPieces(resetBoardStateWhite());\r\n            }\r\n    \r\n            // set the message on the modal\r\n             setModalMessage((bottomColour === \"b\" ? \"Black\" : \"White\") + \" Wins\");\r\n    \r\n            // open modal\r\n            setModalIsOpen(true);\r\n        } \r\n    \r\n        if (validator.isStalemate(check, moveList, colour, pieces, dirn)) {\r\n    \r\n            // reset the pieces\r\n            if (bottomColour === \"w\") {\r\n                setPieces(resetBoardStateBlack());\r\n            } else {\r\n                setPieces(resetBoardStateWhite());\r\n            }\r\n    \r\n            // the message displayed onthe modal\r\n            setModalMessage(\"Stalemate\");\r\n    \r\n            // open modal\r\n            setModalIsOpen(true);\r\n        }\r\n    }\r\n\r\n    function closeModal() {\r\n        setModalIsOpen(false); \r\n    }\r\n\r\n    // Puts piece back to previous position\r\n    function resetPiece(activePiece) {\r\n        activePiece.style.position = \"relative\";\r\n        activePiece.style.removeProperty(\"top\");\r\n        activePiece.style.removeProperty(\"left\");\r\n    }\r\n\r\n    function playSound() {\r\n        const sound = new Howl({\r\n            src: [MoveSFX]\r\n        });\r\n\r\n        sound.play();\r\n    }\r\n\r\n    function alphaToNum(x, y) {\r\n        console.log(H_AXIS_W.indexOf(x), V_AXIS_W.indexOf(y));\r\n\r\n        if (bottomColour === \"w\") {\r\n            console.log(H_AXIS_W.indexOf(x), V_AXIS_W.indexOf(y));\r\n            return([H_AXIS_W.indexOf(x), V_AXIS_W.indexOf(y)]);\r\n        } else {\r\n            return([H_AXIS_B.indexOf(x), V_AXIS_B.indexOf(y)]);\r\n        }\r\n    }\r\n\r\n    function numToAlpha(x, y) {\r\n        if (bottomColour === \"w\") {\r\n            return([H_AXIS_W[x], V_AXIS_W[y]]);\r\n        } else {\r\n            return([H_AXIS_B[x], V_AXIS_B[y]]);\r\n        }\r\n    }   \r\n\r\n    // Nested for loop that generates all 64 tiles required\r\n    for (let i = 0; i < boardColours.length; i++) {\r\n        board.push(<Tile key={i} type={boardColours[i]} piece={pieceTypes[i]} colour={colourArray[i]}/>);\r\n    }\r\n    \r\n    return (\r\n        <div onMouseMove={e => movePiece(e)}\r\n            onMouseDown={e => grabPiece(e)}\r\n            onMouseUp={e => dropPiece(e)}\r\n            id=\"chessboard\"\r\n            ref={chessboardRef}\r\n            >\r\n            {board}\r\n\r\n            <Modal style={{overlay:{zIndex:100}, content:{zIndex:100}}} isOpen={modalIsOpen} ariaHideApp={false}>\r\n                <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"></link>\r\n                <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin></link>\r\n                <link href=\"https://fonts.googleapis.com/css2?family=Manrope:wght@200&display=swap\" rel=\"stylesheet\"></link>\r\n                <div id=\"modal_container\">\r\n                    <div id=\"mess_button_container\">\r\n                        <header id=\"modal_message\">{modalMessage}</header>\r\n                        <button id=\"play_again_button\" onClick={() => closeModal()}>Play Again?</button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );   \r\n}","export default class Piece {\r\n    constructor(x, y, type, colour) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.type = type;\r\n        this.colour = colour;\r\n        this.enPassant = false;\r\n        this.isMoved = false;\r\n        this.taken = false;\r\n    }\r\n}","export default class Validator {\r\n    tileIsOccupied(x, y, boardState) {\r\n        const piece = boardState.find( p => p.x === x && p.y === y);\r\n\r\n        if (piece) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    tileIsOccupiedByOpponentOrEmpty(x, y, boardState, colour) {\r\n        if (this.tileIsOccupiedByOpponent(x, y, boardState, colour) || !(this.tileIsOccupied(x, y, boardState))) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    tileIsOccupiedByOpponent(x, y, boardState, colour) {\r\n        const piece = boardState.find( p => p.x === x && p.y === y && p.colour !== colour);\r\n\r\n        if (piece) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    isEnPassant(px, py, x, y, type, colour, boardState, dirn) {\r\n        const direction = colour === \"w\" ? 1 * dirn : -1 * dirn;\r\n\r\n        if (type === \"pawn\") {\r\n            if (Math.abs(x - px) === 1 && y - py === direction) {\r\n                let piece = boardState.find(p => p.x === x && p.y === y - direction && p.enPassant);\r\n\r\n                if (piece) {\r\n                    piece.taken = true;\r\n                    return true;\r\n                }\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    tileIsOccupiedByOpponentSpec(x, y, boardState, colour, type) {\r\n        const piece = boardState.find( p => p.x === x && p.y === y && p.colour !== colour && p.type === type );\r\n\r\n        if (piece) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    isInCheck(colour, boardState, dirn) {\r\n        const direction = colour === \"w\" ? 1 * dirn: -1 * dirn;\r\n        const myKing = boardState.find(p => p.type === \"king\" && p.colour === colour);\r\n\r\n        let xInc = 1;\r\n        let yInc = 0;\r\n\r\n        let xCount = myKing.x + xInc;\r\n        let yCount = myKing.y + yInc;\r\n\r\n        // loop through the previous positions\r\n        while (xCount <= 7) {\r\n            if (this.tileIsOccupied(xCount, yCount, boardState)) {\r\n                if (this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"queen\") || this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"rook\")) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            xCount += xInc;\r\n        }\r\n\r\n        xInc = 1;\r\n        yInc = 1;\r\n\r\n        xCount = myKing.x + xInc;\r\n        yCount = myKing.y + yInc;\r\n\r\n        // loop through the previous positions\r\n        while (xCount <= 7 && yCount <= 7) {\r\n            if (this.tileIsOccupied(xCount, yCount, boardState)) {\r\n                if (this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"queen\") || this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"bishop\")) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            xCount += xInc;\r\n            yCount += yInc;\r\n        }\r\n\r\n        xInc = 0;\r\n        yInc = 1;\r\n\r\n        xCount = myKing.x + xInc;\r\n        yCount = myKing.y + yInc;\r\n\r\n        // loop through the previous positions\r\n        while (yCount <= 7) {\r\n            if (this.tileIsOccupied(xCount, yCount, boardState)) {\r\n                if (this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"queen\") || this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"rook\")) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            yCount += yInc;\r\n        }\r\n\r\n        xInc = -1;\r\n        yInc = 1;\r\n\r\n        xCount = myKing.x + xInc;\r\n        yCount = myKing.y + yInc;\r\n\r\n        // loop through the previous positions\r\n        while (xCount >= 0 && yCount <= 7) {\r\n            if (this.tileIsOccupied(xCount, yCount, boardState)) {\r\n                if (this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"queen\") || this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"bishop\")) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            xCount += xInc;\r\n            yCount += yInc;\r\n        }\r\n\r\n        xInc = -1;\r\n        yInc = 0;\r\n\r\n        xCount = myKing.x + xInc;\r\n        yCount = myKing.y + yInc;\r\n\r\n        // loop through the previous positions\r\n        while (xCount >= 0) {\r\n            if (this.tileIsOccupied(xCount, yCount, boardState)) {\r\n                if (this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"queen\") || this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"rook\")) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            xCount += xInc;\r\n        }\r\n\r\n        xInc = -1;\r\n        yInc = -1;\r\n\r\n        xCount = myKing.x + xInc;\r\n        yCount = myKing.y + yInc;\r\n\r\n        // loop through the previous positions\r\n        while (xCount >= 0 && yCount >= 0) {\r\n            if (this.tileIsOccupied(xCount, yCount, boardState)) {\r\n                if (this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"queen\") || this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"bishop\")) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            xCount += xInc;\r\n            yCount += yInc;\r\n        }\r\n\r\n        xInc = 0;\r\n        yInc = -1;\r\n\r\n        xCount = myKing.x + xInc;\r\n        yCount = myKing.y + yInc;\r\n\r\n        // loop through the previous positions\r\n        while (yCount >= 0) {\r\n            if (this.tileIsOccupied(xCount, yCount, boardState)) {\r\n                if (this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"queen\") || this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"rook\")) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            yCount += yInc;\r\n        }\r\n\r\n        xInc = 1;\r\n        yInc = -1;\r\n\r\n        xCount = myKing.x + xInc;\r\n        yCount = myKing.y + yInc;\r\n\r\n        // loop through the previous positions\r\n        while (xCount <= 7 && yCount >= 0) {\r\n            if (this.tileIsOccupied(xCount, yCount, boardState)) {\r\n                if (this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"queen\") || this.tileIsOccupiedByOpponentSpec(xCount, yCount, boardState, colour, \"bishop\")) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            xCount += xInc;\r\n            yCount += yInc;\r\n        }\r\n\r\n        // check if pawns/kngiht are putting your king in check\r\n        if (\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x + 1, myKing.y + 1, boardState, colour, \"king\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x - 1, myKing.y + 1, boardState, colour, \"king\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x, myKing.y + 1, boardState, colour, \"king\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x + 1, myKing.y - 1, boardState, colour, \"king\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x - 1, myKing.y - 1, boardState, colour, \"king\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x, myKing.y - 1, boardState, colour, \"king\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x + 1, myKing.y, boardState, colour, \"king\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x - 1, myKing.y, boardState, colour, \"king\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x + 1, myKing.y + direction, boardState, colour, \"pawn\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x - 1, myKing.y + direction, boardState, colour, \"pawn\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x + 2, myKing.y + 1, boardState, colour, \"knight\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x + 2, myKing.y - 1, boardState, colour, \"knight\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x + 1, myKing.y + 2, boardState, colour, \"knight\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x + 1, myKing.y - 2, boardState, colour, \"knight\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x - 1, myKing.y + 2, boardState, colour, \"knight\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x - 1, myKing.y - 2, boardState, colour, \"knight\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x - 2, myKing.y + 1, boardState, colour, \"knight\") ||\r\n            this.tileIsOccupiedByOpponentSpec(myKing.x - 2, myKing.y - 1, boardState, colour, \"knight\")\r\n            ) {\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    hasValidMovesRemaining(colour, boardState, dirn) {\r\n        let myPieces = [];\r\n        let direction = colour === \"w\" ? 1 * dirn: -1 * dirn;\r\n\r\n        // check moves for all pieces of the same colour\r\n\r\n        // get pieces of the same colour and store them in myPieces\r\n        for (let i = 0; i < boardState.length; i++) {\r\n            if (boardState[i].colour === colour) {\r\n                myPieces.push(boardState[i]);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < myPieces.length; i++) {\r\n            let px = myPieces[i].x;\r\n            let py = myPieces[i].y;\r\n            let type = myPieces[i].type;\r\n\r\n            switch (type) {\r\n                case \"pawn\":\r\n\r\n                    // check 1 move upwards front\r\n                    if (this.isValidMove(px, py, px, py + direction, type, colour, boardState, dirn)) {\r\n                        return true;\r\n\r\n                    // 2 moves upwards\r\n                    } else if (this.isValidMove(px, py, px, py + direction * 2, type, colour, boardState, dirn)) {\r\n                        return true;\r\n\r\n                    // right diagonal attack\r\n                    } else if (this.isValidMove(px, py, px + 1, py + direction, type, colour, boardState, dirn)) {\r\n                        return true;\r\n\r\n                    // left diagonal attack\r\n                    } else if (this.isValidMove(px, py, px - 1, py + direction, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    break;\r\n                case \"king\":\r\n\r\n                    // check all poosible moves\r\n\r\n                    if (this.isValidMove(px, py, px + 1, py, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (this.isValidMove(px, py, px + 1, py + 1, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (this.isValidMove(px, py, px + 1, py - 1, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (this.isValidMove(px, py, px - 1, py, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n                    \r\n                    if (this.isValidMove(px, py, px - 1, py + 1, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n\r\n                    if (this.isValidMove(px, py, px - 1, py - 1, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (this.isValidMove(px, py, px, py - 1, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (this.isValidMove(px, py, px, py + 1, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    break;\r\n                case \"bishop\":\r\n\r\n                    for (let i = 1; i <= 7; i ++) {\r\n                        if (this.isValidMove(px, py, px + i, py + i, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n\r\n                        if (this.isValidMove(px, py, px + i, py - i, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n\r\n                        if (this.isValidMove(px, py, px - i, py + i, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n\r\n                        if (this.isValidMove(px, py, px - i, py - i, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                case \"queen\":\r\n                    for (let i = 1; i <= 7; i ++) {\r\n                        if (this.isValidMove(px, py, px + i, py + i, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n\r\n                        if (this.isValidMove(px, py, px + i, py - i, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n\r\n                        if (this.isValidMove(px, py, px - i, py + i, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n\r\n                        if (this.isValidMove(px, py, px - i, py - i, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n\r\n                        if (this.isValidMove(px, py, px, py + i, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n\r\n                        if (this.isValidMove(px, py, px, py - i, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n\r\n                        if (this.isValidMove(px, py, px + i, py, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n\r\n                        if (this.isValidMove(px, py, px - i, py, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                case \"rook\":\r\n                    for (let i = 1; i <= 7; i ++) {\r\n                        if (this.isValidMove(px, py, px, py + i, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n\r\n                        if (this.isValidMove(px, py, px, py - i, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n\r\n                        if (this.isValidMove(px, py, px + i, py, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n\r\n                        if (this.isValidMove(px, py, px - i, py, type, colour, boardState, dirn)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                case \"knight\":\r\n                    if (this.isValidMove(px, py, px + 1, py + 2, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (this.isValidMove(px, py, px + 1, py - 2, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (this.isValidMove(px, py, px + 2, py + 1, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (this.isValidMove(px, py, px + 2, py - 1, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (this.isValidMove(px, py, px - 1, py - 2, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (this.isValidMove(px, py, px - 1, py + 2, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (this.isValidMove(px, py, px - 2, py - 1, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    if (this.isValidMove(px, py, px - 2, py + 1, type, colour, boardState, dirn)) {\r\n                        return true;\r\n                    }\r\n\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isStalemate(isCheck, moves, colour, boardState, dirn) {\r\n        \r\n        // return false if current player is in check or no moves have been made\r\n        if (isCheck || moves.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        // check for threefold repetition\r\n        let amtOfMoves = moves.length;\r\n\r\n        if (moves.length >= 12) {\r\n            // if the last three move patters are the same\r\n            if (moves[amtOfMoves - 1].toString() + moves[amtOfMoves - 2].toString() + moves[amtOfMoves - 3].toString() + moves[amtOfMoves - 4].toString() === moves[amtOfMoves - 5].toString() + moves[amtOfMoves - 6].toString() + moves[amtOfMoves - 7].toString() + moves[amtOfMoves - 8].toString()) {\r\n                if (moves[amtOfMoves - 1].toString() + moves[amtOfMoves - 2].toString() + moves[amtOfMoves - 3].toString() + moves[amtOfMoves - 4].toString() === moves[amtOfMoves - 9].toString() + moves[amtOfMoves - 10].toString() + moves[amtOfMoves - 11].toString() + moves[amtOfMoves - 12].toString()) {\r\n                    return true;\r\n                }\r\n            } \r\n        }\r\n\r\n        // check for two kings\r\n        if (boardState.length === 2) {\r\n            return true;\r\n        } else if (boardState.length === 3) {\r\n            if (boardState.find(p => p.type === \"bishop\" || p.type === \"knight\")) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // check if there are valid moves left to play\r\n        if (this.hasValidMovesRemaining(colour, boardState, dirn)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    isCheckmate(isCheck, colour, boardState, dirn) {\r\n        if (!isCheck) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.hasValidMovesRemaining(colour, boardState, dirn)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    isValidMove(px, py, x, y, type, colour, boardState, dirn, check) {\r\n\r\n        const kingW = boardState.find(p => p.type === \"king\" && p.colour === \"w\");\r\n        const kingB = boardState.find(p => p.type === \"king\" && p.colour === \"b\");\r\n\r\n        // if the piece wasn't moved at all\r\n        if (x === px && y === py) {\r\n            return false;\r\n        }\r\n\r\n        // if move is ontop of king\r\n        if ((x === kingW.x && y === kingW.y) || (x === kingB.x && y === kingB.y)) {\r\n            return false;\r\n        }\r\n\r\n        // if the move is off the board\r\n        if (x > 7 || x < 0 || y > 7 || y < 0) {\r\n            return false;\r\n        }\r\n\r\n        let currentPiece = boardState.find(p => p.x === px && p.y === py);\r\n        \r\n        // check if moving this piece puts your king in check\r\n        let pieceHold = boardState.find(p => p.x === x && p.y === y);\r\n\r\n        // remove attacked piece temporarily\r\n        if (pieceHold) {\r\n            boardState.splice(boardState.findIndex(p => p.x === x && p.y === y), 1);\r\n        }\r\n\r\n        // if current piece exists\r\n        if (currentPiece) {\r\n            currentPiece.x = x;\r\n            currentPiece.y = y;\r\n\r\n            // check if the move results in check\r\n            if (this.isInCheck(colour, boardState, dirn)) {\r\n                currentPiece.x = px;\r\n                currentPiece.y = py;\r\n                \r\n                // if there was an attack piece, put it back into the array\r\n                if (pieceHold) {\r\n                    boardState.push(pieceHold);\r\n                }\r\n                \r\n                return false;\r\n            }\r\n        }\r\n\r\n        // put the current piece back into the original position\r\n        currentPiece.x = px;\r\n        currentPiece.y = py;\r\n\r\n        // if there was an attack piece, put in back into the array\r\n        if (pieceHold) {\r\n            boardState.push(pieceHold);\r\n        }\r\n\r\n        switch (type) {\r\n            case \"pawn\":\r\n                let startRow;\r\n\r\n                if (dirn === 1) {\r\n                    startRow = colour === \"w\" ? 1 : 6;\r\n                } else {\r\n                    startRow = colour === \"w\" ? 6 : 1;\r\n                }\r\n                \r\n                const direction = colour === \"w\" ? 1 * dirn : -1 * dirn;\r\n                \r\n                // if the pawn is vertically moving 2 squares\r\n                if (px === x && py === startRow && y - py === 2 * direction) {\r\n\r\n                    // if the tile infront and 2 squares ahead aren't occupied\r\n                    if (!this.tileIsOccupied(x, y, boardState) && !this.tileIsOccupied(x, y - direction, boardState)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n\r\n                // if the pawn is vertically moving 1 square\r\n                } else if (px === x && y - py === direction) {\r\n\r\n                    // if the tile infront isn't occupied\r\n                    if (!this.tileIsOccupied(x, y, boardState)) {\r\n\r\n                        if (y === 0 || y === 7) {\r\n                            currentPiece.type = \"queen\";\r\n                            console.log(\"queen\");\r\n                        }\r\n\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n\r\n                // if the pawn is moving diagonally (1 up and 1 in either x direction)\r\n                } else if (y - py === direction) {\r\n                    if (Math.abs(x - px) === 1) {\r\n                        if (this.tileIsOccupiedByOpponent(x, y, boardState, colour))  {\r\n                            if (y === 0 || y === 7) {\r\n                                currentPiece.type = \"queen\";\r\n                            }\r\n\r\n                            return true;\r\n                        }\r\n                    } else {\r\n                        return false;\r\n                    }\r\n\r\n                    // check if the move doesnt result in check, check that there is a black piece on the diagonal square, check for en passant\r\n                    return false;\r\n\r\n                // impossible move\r\n                } else {\r\n                    return false;\r\n                }\r\n            case \"rook\":\r\n\r\n                // if the rook is moving froward / sideways\r\n                if ((x === px || y === py)) {  \r\n                    let yInc = 0;\r\n                    let xInc = 0;\r\n                    \r\n                    // if it's on the same column\r\n                    if (x === px) {\r\n                        if (y - py < 0) {\r\n                            yInc = -1;\r\n                        } else {\r\n                            yInc = 1;\r\n                        }\r\n\r\n                    // if the rook is on the same row\r\n                    } else {\r\n                        if (x - px < 0) {\r\n                            xInc = -1;\r\n                        } else {\r\n                            xInc = 1;\r\n                        }\r\n                    }\r\n\r\n                    let xCount = px + xInc;\r\n                    let yCount = py + yInc;\r\n\r\n                    // loop through the previous positions\r\n                    while (Math.abs(xCount - x) > 0 || Math.abs(yCount - y) > 0) {\r\n                        if (this.tileIsOccupied(xCount, yCount, boardState)) {\r\n                            return false;\r\n                        }\r\n                        \r\n                        xCount += xInc;\r\n                        yCount += yInc;\r\n                    }\r\n\r\n                    // if the tile being dropped on has enemy or is empty\r\n                    if (this.tileIsOccupiedByOpponentOrEmpty(x, y, boardState, colour)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                    \r\n                } else {\r\n                    return false;\r\n                }\r\n            case \"knight\":\r\n\r\n                // if the kinght is moving 2 in either x/y then 1 in the other direction\r\n                if ((Math.abs(x - px) === 1 && Math.abs(y - py) === 2) || (Math.abs(x - px) === 2 && Math.abs(y - py) === 1)) {\r\n\r\n                    // if the tile is either empty of occupied by an enemy\r\n                    if (this.tileIsOccupiedByOpponent(x, y, boardState, colour) || !(this.tileIsOccupied(x, y, boardState))) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    return false;\r\n                }\r\n            case \"bishop\":\r\n\r\n                // if the bishop is moving diagonally\r\n                if (Math.abs(x - px) === Math.abs(y - py)) {     \r\n                    \r\n                    // x and y increment\r\n                    let xInc = x - px < 0 ? -1 : 1;\r\n                    let yInc = y - py < 0 ? -1 : 1;\r\n\r\n                    // the coordinates of the sqaures between dest and start\r\n                    let xCount = px + xInc;\r\n                    let yCount = py + yInc;\r\n\r\n                    // loop through the previous positions\r\n                    while (Math.abs(xCount - x) > 0 && Math.abs(yCount - y) > 0) {\r\n\r\n                        // if a tile in the path is occupied\r\n                        if (this.tileIsOccupied(xCount, yCount, boardState)) {\r\n                            return false;\r\n                        }\r\n                        \r\n                        xCount += xInc;\r\n                        yCount += yInc;\r\n                    }\r\n\r\n                    // if the dropped tile has enemy or is empty\r\n                    if (this.tileIsOccupiedByOpponentOrEmpty(x, y, boardState, colour)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                    \r\n                } else {\r\n                    return false;\r\n                }\r\n            case \"queen\":\r\n\r\n                // if the magnitude in x and y change are the same or if the row xor col stays the same\r\n                if ((Math.abs(x - px) === Math.abs(y - py)) || (x === px || y === py)) {\r\n                    let yInc = 0;\r\n                    let xInc = 0;\r\n\r\n                    // if downwards movement\r\n                    if (y - py < 0) {\r\n                        yInc = -1;\r\n\r\n                    //if upwards movement\r\n                    } else if (y > py) {\r\n                        yInc = 1;\r\n                    }\r\n\r\n                    // if leftwards movement\r\n                    if (x - px < 0) {\r\n                        xInc = -1;\r\n\r\n                    // if rightwards movement\r\n                    } else if (x > px) {\r\n                        xInc = 1;\r\n                    }\r\n\r\n                    let xCount = px + xInc;\r\n                    let yCount = py + yInc;\r\n\r\n                    // loop through the previous positions\r\n                    while (Math.abs(xCount - x) > 0 || Math.abs(yCount - y) > 0) {\r\n                        if (this.tileIsOccupied(xCount, yCount, boardState)) {\r\n                            return false;\r\n                        }\r\n\r\n                        xCount += xInc;\r\n                        yCount += yInc;\r\n                    }\r\n\r\n                    // if the tile being dropped on has enemy or is empty\r\n                    if (this.tileIsOccupiedByOpponentOrEmpty(x, y, boardState, colour)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n\r\n                } else {\r\n                    return false;\r\n                }\r\n            case \"king\":\r\n\r\n                // if the x and y have moved by less than 2 squares\r\n                if (Math.abs(x - px) <= 1 && Math.abs(y - py) <= 1) {\r\n\r\n                    // if the tile being dropped on has enemy or is empty\r\n                    if (this.tileIsOccupiedByOpponentOrEmpty(x, y, boardState, colour)) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                } else if (Math.abs(x - px) === 2 && y === py && !check) {\r\n                        let xInc = 0;\r\n\r\n                        // if leftwards movement\r\n                        if (x - px < 0) {\r\n                            xInc = -1;\r\n\r\n                        // if rightwards movement\r\n                        } else if (x > px) {\r\n                            xInc = 1;\r\n                        }\r\n\r\n                        let xCount = px + xInc;\r\n                        let maxX = 0;\r\n\r\n                        if (xInc === 1) {\r\n                            maxX = 7;\r\n                        }\r\n\r\n                        // loop through the previous positions\r\n                        while (xCount !== maxX) {\r\n                            if (this.tileIsOccupied(xCount, y, boardState)) {\r\n                                return false;\r\n                            }\r\n                            xCount += xInc;\r\n                        }\r\n\r\n                        // find rook\r\n                        let myRook = boardState.find(p => p.x === xCount && p.y === py);\r\n\r\n                        // if the king and rook haven't been moved\r\n                        if (myRook && !currentPiece.isMoved && !myRook.isMoved) {\r\n                            myRook.x = x - xInc;\r\n                            return true;\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                } else {\r\n                    return false;\r\n                } \r\n            default:\r\n                return false;\r\n            \r\n        }\r\n    }\r\n}","export const H_AXIS = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"];\r\nexport const V_AXIS = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\r\n\r\nexport const H_AXIS_W = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"];\r\nexport const V_AXIS_W = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\r\n\r\nexport const H_AXIS_B = [\"H\", \"G\", \"F\", \"E\", \"D\", \"C\", \"B\", \"A\"];\r\nexport const V_AXIS_B = [\"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"];\r\n","export default __webpack_public_path__ + \"static/media/move.205baa9a.mp3\";","export default function functionName() {\r\n    return (\r\n        <div></div>\r\n    )\r\n}","import './App.css';\nimport Chessboard from './components/Chessboard/Chessboard';\nimport DiffSlider from './components/DiffSlider/DiffSlider';\n\nfunction App() {\n  return (\n    <div id='app'>\n      <Chessboard />\n      <DiffSlider />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}